def get_project_version(path_to_pom) {
    def pom_model = readMavenPom file: path_to_pom
    return pom_model.version;
}

pipeline {
    environment {
        MAVEN_LOCAL_REPO = '${WORKSPACE}/.m2/repository'
        PROJECT_VERSION = get_project_version('/${WORKSPACE}/backend/pom.xml')
    }

    agent {
        docker {
            image 'maven:3.9.6-eclipse-temurin-21-alpine'
            args '-v /var/run/docker.sock:/var/run/docker.sock \
                  -v ${JENKINS_HOME}/test_assets/${JOB_NAME}/assets:${WORKSPACE}/backend/src/test/resources/assets \
                  -u 963:965 \
                  -e JENKINS_HOME=${JENKINS_HOME} -e JOB_NAME=${JOB_NAME} \
                  --env-file ${JENKINS_HOME}/test_assets/${JOB_NAME}/.env.dev-test \
                  --network host'
        }
    }

    stages {
        stage("Test") {
            steps {
                echo "$POM_VERSION"

                sh '''
                    cat > ${WORKSPACE}/backend/src/test/resources/assets/.env <<EOF
                    JENKINS_HOME=${JENKINS_HOME}
                    JOB_NAME=${JOB_NAME}
                    EOF
                '''
                sh 'cd backend && mvn -Dmaven.repo.local=${MAVEN_LOCAL_REPO} dependency:go-offline clean test'
            }
        }

        stage("Build docker image") {
//             when { expression { env.BRANCH_NAME == 'master' } }


            steps {
                echo "Build"
                sh 'java --version'
            }
        }

        stage("Publish docker image") {
//             when { expression { env.BRANCH_NAME == 'master' } }



            steps {
                echo "Deploy"
            }
        }
    }
}